package com.march.reaper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.march.reaper.imodel.bean.VideoFun;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_FUN".
*/
public class VideoFunDao extends AbstractDao<VideoFun, Void> {

    public static final String TABLENAME = "VIDEO_FUN";

    /**
     * Properties of entity VideoFun.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Time_stamp = new Property(0, String.class, "time_stamp", false, "TIME_STAMP");
        public final static Property Describe = new Property(1, String.class, "describe", false, "DESCRIBE");
        public final static Property LinkPageUrl = new Property(2, String.class, "linkPageUrl", false, "LINK_PAGE_URL");
        public final static Property Width = new Property(3, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(4, Integer.class, "height", false, "HEIGHT");
        public final static Property PublishTime = new Property(5, Integer.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property VideoCategory = new Property(6, String.class, "videoCategory", false, "VIDEO_CATEGORY");
        public final static Property VideoCategoryType = new Property(7, Integer.class, "videoCategoryType", false, "VIDEO_CATEGORY_TYPE");
        public final static Property VideoType = new Property(8, String.class, "videoType", false, "VIDEO_TYPE");
        public final static Property VideoPlayUrl = new Property(9, String.class, "videoPlayUrl", false, "VIDEO_PLAY_URL");
    };


    public VideoFunDao(DaoConfig config) {
        super(config);
    }
    
    public VideoFunDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_FUN\" (" + //
                "\"TIME_STAMP\" TEXT," + // 0: time_stamp
                "\"DESCRIBE\" TEXT," + // 1: describe
                "\"LINK_PAGE_URL\" TEXT," + // 2: linkPageUrl
                "\"WIDTH\" INTEGER," + // 3: width
                "\"HEIGHT\" INTEGER," + // 4: height
                "\"PUBLISH_TIME\" INTEGER," + // 5: publishTime
                "\"VIDEO_CATEGORY\" TEXT," + // 6: videoCategory
                "\"VIDEO_CATEGORY_TYPE\" INTEGER," + // 7: videoCategoryType
                "\"VIDEO_TYPE\" TEXT," + // 8: videoType
                "\"VIDEO_PLAY_URL\" TEXT);"); // 9: videoPlayUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_FUN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoFun entity) {
        stmt.clearBindings();
 
        String time_stamp = entity.getTime_stamp();
        if (time_stamp != null) {
            stmt.bindString(1, time_stamp);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(2, describe);
        }
 
        String linkPageUrl = entity.getLinkPageUrl();
        if (linkPageUrl != null) {
            stmt.bindString(3, linkPageUrl);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(4, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(5, height);
        }
 
        Integer publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(6, publishTime);
        }
 
        String videoCategory = entity.getVideoCategory();
        if (videoCategory != null) {
            stmt.bindString(7, videoCategory);
        }
 
        Integer videoCategoryType = entity.getVideoCategoryType();
        if (videoCategoryType != null) {
            stmt.bindLong(8, videoCategoryType);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(9, videoType);
        }
 
        String videoPlayUrl = entity.getVideoPlayUrl();
        if (videoPlayUrl != null) {
            stmt.bindString(10, videoPlayUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoFun entity) {
        stmt.clearBindings();
 
        String time_stamp = entity.getTime_stamp();
        if (time_stamp != null) {
            stmt.bindString(1, time_stamp);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(2, describe);
        }
 
        String linkPageUrl = entity.getLinkPageUrl();
        if (linkPageUrl != null) {
            stmt.bindString(3, linkPageUrl);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(4, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(5, height);
        }
 
        Integer publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(6, publishTime);
        }
 
        String videoCategory = entity.getVideoCategory();
        if (videoCategory != null) {
            stmt.bindString(7, videoCategory);
        }
 
        Integer videoCategoryType = entity.getVideoCategoryType();
        if (videoCategoryType != null) {
            stmt.bindLong(8, videoCategoryType);
        }
 
        String videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindString(9, videoType);
        }
 
        String videoPlayUrl = entity.getVideoPlayUrl();
        if (videoPlayUrl != null) {
            stmt.bindString(10, videoPlayUrl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public VideoFun readEntity(Cursor cursor, int offset) {
        VideoFun entity = new VideoFun( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // time_stamp
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // describe
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // linkPageUrl
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // width
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // height
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // publishTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoCategory
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // videoCategoryType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // videoType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // videoPlayUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoFun entity, int offset) {
        entity.setTime_stamp(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDescribe(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLinkPageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWidth(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHeight(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPublishTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setVideoCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoCategoryType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setVideoType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideoPlayUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(VideoFun entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(VideoFun entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
