package com.march.reaper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.march.reaper.imodel.bean.AlbumItemCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_ITEM_COLLECTION".
*/
public class AlbumItemCollectionDao extends AbstractDao<AlbumItemCollection, String> {

    public static final String TABLENAME = "ALBUM_ITEM_COLLECTION";

    /**
     * Properties of entity AlbumItemCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Album_link = new Property(0, String.class, "album_link", true, "ALBUM_LINK");
        public final static Property Key_words = new Property(1, String.class, "key_words", false, "KEY_WORDS");
        public final static Property Album_cover = new Property(2, String.class, "album_cover", false, "ALBUM_COVER");
        public final static Property Album_desc = new Property(3, String.class, "album_desc", false, "ALBUM_DESC");
    };


    public AlbumItemCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumItemCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_ITEM_COLLECTION\" (" + //
                "\"ALBUM_LINK\" TEXT PRIMARY KEY NOT NULL ," + // 0: album_link
                "\"KEY_WORDS\" TEXT," + // 1: key_words
                "\"ALBUM_COVER\" TEXT," + // 2: album_cover
                "\"ALBUM_DESC\" TEXT);"); // 3: album_desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_ITEM_COLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlbumItemCollection entity) {
        stmt.clearBindings();
 
        String album_link = entity.getAlbum_link();
        if (album_link != null) {
            stmt.bindString(1, album_link);
        }
 
        String key_words = entity.getKey_words();
        if (key_words != null) {
            stmt.bindString(2, key_words);
        }
 
        String album_cover = entity.getAlbum_cover();
        if (album_cover != null) {
            stmt.bindString(3, album_cover);
        }
 
        String album_desc = entity.getAlbum_desc();
        if (album_desc != null) {
            stmt.bindString(4, album_desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlbumItemCollection entity) {
        stmt.clearBindings();
 
        String album_link = entity.getAlbum_link();
        if (album_link != null) {
            stmt.bindString(1, album_link);
        }
 
        String key_words = entity.getKey_words();
        if (key_words != null) {
            stmt.bindString(2, key_words);
        }
 
        String album_cover = entity.getAlbum_cover();
        if (album_cover != null) {
            stmt.bindString(3, album_cover);
        }
 
        String album_desc = entity.getAlbum_desc();
        if (album_desc != null) {
            stmt.bindString(4, album_desc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AlbumItemCollection readEntity(Cursor cursor, int offset) {
        AlbumItemCollection entity = new AlbumItemCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // album_link
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key_words
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // album_cover
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // album_desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlbumItemCollection entity, int offset) {
        entity.setAlbum_link(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setKey_words(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlbum_cover(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AlbumItemCollection entity, long rowId) {
        return entity.getAlbum_link();
    }
    
    @Override
    public String getKey(AlbumItemCollection entity) {
        if(entity != null) {
            return entity.getAlbum_link();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
