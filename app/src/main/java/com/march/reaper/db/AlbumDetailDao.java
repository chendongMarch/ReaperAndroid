package com.march.reaper.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.march.reaper.imodel.bean.AlbumDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_DETAIL".
*/
public class AlbumDetailDao extends AbstractDao<AlbumDetail, Void> {

    public static final String TABLENAME = "ALBUM_DETAIL";

    /**
     * Properties of entity AlbumDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Album_link = new Property(0, String.class, "album_link", false, "ALBUM_LINK");
        public final static Property Photo_src = new Property(1, String.class, "photo_src", false, "PHOTO_SRC");
        public final static Property Width = new Property(2, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, Integer.class, "height", false, "HEIGHT");
        public final static Property Time_stamp = new Property(4, String.class, "time_stamp", false, "TIME_STAMP");
        public final static Property IsFavorite = new Property(5, Boolean.class, "isFavorite", false, "IS_FAVORITE");
    };


    public AlbumDetailDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_DETAIL\" (" + //
                "\"ALBUM_LINK\" TEXT," + // 0: album_link
                "\"PHOTO_SRC\" TEXT," + // 1: photo_src
                "\"WIDTH\" INTEGER," + // 2: width
                "\"HEIGHT\" INTEGER," + // 3: height
                "\"TIME_STAMP\" TEXT," + // 4: time_stamp
                "\"IS_FAVORITE\" INTEGER);"); // 5: isFavorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AlbumDetail entity) {
        stmt.clearBindings();
 
        String album_link = entity.getAlbum_link();
        if (album_link != null) {
            stmt.bindString(1, album_link);
        }
 
        String photo_src = entity.getPhoto_src();
        if (photo_src != null) {
            stmt.bindString(2, photo_src);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(3, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(4, height);
        }
 
        String time_stamp = entity.getTime_stamp();
        if (time_stamp != null) {
            stmt.bindString(5, time_stamp);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(6, isFavorite ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AlbumDetail entity) {
        stmt.clearBindings();
 
        String album_link = entity.getAlbum_link();
        if (album_link != null) {
            stmt.bindString(1, album_link);
        }
 
        String photo_src = entity.getPhoto_src();
        if (photo_src != null) {
            stmt.bindString(2, photo_src);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(3, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(4, height);
        }
 
        String time_stamp = entity.getTime_stamp();
        if (time_stamp != null) {
            stmt.bindString(5, time_stamp);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(6, isFavorite ? 1L: 0L);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AlbumDetail readEntity(Cursor cursor, int offset) {
        AlbumDetail entity = new AlbumDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // album_link
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo_src
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // width
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // height
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time_stamp
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isFavorite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AlbumDetail entity, int offset) {
        entity.setAlbum_link(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhoto_src(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTime_stamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsFavorite(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AlbumDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AlbumDetail entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
