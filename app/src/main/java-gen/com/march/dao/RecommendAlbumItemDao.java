package com.march.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.march.bean.RecommendAlbumItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECOMMEND_ALBUM_ITEM".
*/
public class RecommendAlbumItemDao extends AbstractDao<RecommendAlbumItem, Void> {

    public static final String TABLENAME = "RECOMMEND_ALBUM_ITEM";

    /**
     * Properties of entity RecommendAlbumItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Album_type = new Property(0, String.class, "album_type", false, "ALBUM_TYPE");
        public final static Property Album_link = new Property(1, String.class, "album_link", false, "ALBUM_LINK");
        public final static Property Album_cover = new Property(2, String.class, "album_cover", false, "ALBUM_COVER");
        public final static Property Album_desc = new Property(3, String.class, "album_desc", false, "ALBUM_DESC");
        public final static Property Time_stamp = new Property(4, String.class, "time_stamp", false, "TIME_STAMP");
        public final static Property IsFavorite = new Property(5, Boolean.class, "isFavorite", false, "IS_FAVORITE");
    };


    public RecommendAlbumItemDao(DaoConfig config) {
        super(config);
    }
    
    public RecommendAlbumItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOMMEND_ALBUM_ITEM\" (" + //
                "\"ALBUM_TYPE\" TEXT," + // 0: album_type
                "\"ALBUM_LINK\" TEXT," + // 1: album_link
                "\"ALBUM_COVER\" TEXT," + // 2: album_cover
                "\"ALBUM_DESC\" TEXT," + // 3: album_desc
                "\"TIME_STAMP\" TEXT," + // 4: time_stamp
                "\"IS_FAVORITE\" INTEGER);"); // 5: isFavorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOMMEND_ALBUM_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecommendAlbumItem entity) {
        stmt.clearBindings();
 
        String album_type = entity.getAlbum_type();
        if (album_type != null) {
            stmt.bindString(1, album_type);
        }
 
        String album_link = entity.getAlbum_link();
        if (album_link != null) {
            stmt.bindString(2, album_link);
        }
 
        String album_cover = entity.getAlbum_cover();
        if (album_cover != null) {
            stmt.bindString(3, album_cover);
        }
 
        String album_desc = entity.getAlbum_desc();
        if (album_desc != null) {
            stmt.bindString(4, album_desc);
        }
 
        String time_stamp = entity.getTime_stamp();
        if (time_stamp != null) {
            stmt.bindString(5, time_stamp);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(6, isFavorite ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RecommendAlbumItem readEntity(Cursor cursor, int offset) {
        RecommendAlbumItem entity = new RecommendAlbumItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // album_type
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // album_link
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // album_cover
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album_desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time_stamp
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isFavorite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecommendAlbumItem entity, int offset) {
        entity.setAlbum_type(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAlbum_link(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlbum_cover(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime_stamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsFavorite(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RecommendAlbumItem entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RecommendAlbumItem entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
