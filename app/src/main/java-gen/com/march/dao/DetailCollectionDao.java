package com.march.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.march.bean.DetailCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_COLLECTION".
*/
public class DetailCollectionDao extends AbstractDao<DetailCollection, String> {

    public static final String TABLENAME = "DETAIL_COLLECTION";

    /**
     * Properties of entity DetailCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Album_link = new Property(0, String.class, "album_link", false, "ALBUM_LINK");
        public final static Property Photo_src = new Property(1, String.class, "photo_src", true, "PHOTO_SRC");
        public final static Property Width = new Property(2, Integer.class, "width", false, "WIDTH");
        public final static Property Height = new Property(3, Integer.class, "height", false, "HEIGHT");
    };


    public DetailCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public DetailCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_COLLECTION\" (" + //
                "\"ALBUM_LINK\" TEXT," + // 0: album_link
                "\"PHOTO_SRC\" TEXT PRIMARY KEY NOT NULL ," + // 1: photo_src
                "\"WIDTH\" INTEGER," + // 2: width
                "\"HEIGHT\" INTEGER);"); // 3: height
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_COLLECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DetailCollection entity) {
        stmt.clearBindings();
 
        String album_link = entity.getAlbum_link();
        if (album_link != null) {
            stmt.bindString(1, album_link);
        }
 
        String photo_src = entity.getPhoto_src();
        if (photo_src != null) {
            stmt.bindString(2, photo_src);
        }
 
        Integer width = entity.getWidth();
        if (width != null) {
            stmt.bindLong(3, width);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(4, height);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public DetailCollection readEntity(Cursor cursor, int offset) {
        DetailCollection entity = new DetailCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // album_link
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo_src
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // width
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // height
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DetailCollection entity, int offset) {
        entity.setAlbum_link(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhoto_src(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWidth(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setHeight(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DetailCollection entity, long rowId) {
        return entity.getPhoto_src();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DetailCollection entity) {
        if(entity != null) {
            return entity.getPhoto_src();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
